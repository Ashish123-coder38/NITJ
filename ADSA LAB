# 1. Linear Search using Python

def linear_search(arr, target):
    for index in range(len(arr)):
        
        if arr[index] == target:
            return index
    
    return -1

arr = [3, 5, 7, 9, 11, 13]
target = 9


result = linear_search(arr, target)

if result != -1:
    print(f"Element {target} found at index {result}.")
else:
    print(f"Element {target} not found in the list.")

Output: Element 9 found at index 3.




----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# 2. Selection Sort using Python 

def selection_sort(arr):
    n = len(arr)
    
    
    for i in range(n):
        
        min_index = i
        for j in range(i + 1, n):
            if arr[j] < arr[min_index]:
                min_index = j
        
        
        arr[i], arr[min_index] = arr[min_index], arr[i]
        
    return arr


arr = [64, 25, 12, 22, 11]
sorted_arr = selection_sort(arr)
print("Sorted array:", sorted_arr)

Output: Sorted array: [11, 12, 22, 25, 64]




----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 3. Bubble Sort in python:

def bubble_sort(arr):
    n = len(arr)
    
    
    for i in range(n):
     
        swapped = False
        
    
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
     
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
                swapped = True
        
     
        if not swapped:
            break
    
    return arr


arr = [64, 34, 25, 12, 22, 11, 90]
sorted_arr = bubble_sort(arr)
print("Sorted array:", sorted_arr)

Outout: Sorted array: [11, 12, 22, 25, 34, 64, 90]



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# 4. Binary Search Tree (BST) 

class Node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.value = key

class BST:
    def __init__(self):
        self.root = None
    
    
    def insert(self, key):
        if self.root is None:
            self.root = Node(key)
        else:
            self._insert(self.root, key)
    
    
    def _insert(self, node, key):
        if key < node.value:
            if node.left is None:
                node.left = Node(key)
            else:
                self._insert(node.left, key)
        else:
            if node.right is None:
                node.right = Node(key)
            else:
                self._insert(node.right, key)
    
    
    def search(self, key):
        return self._search(self.root, key)
    
    
    def _search(self, node, key):
            if node is None or node.value == key:
            return node is not None
        
    
        if key > node.value:
            return self._search(node.right, key)
        
        
        return self._search(node.left, key)
    
    
    def inorder(self):
        return self._inorder(self.root)
    
        def _inorder(self, node):
        res = []
        if node:
            res.extend(self._inorder(node.left))
            res.append(node.value)
            res.extend(self._inorder(node.right))
        return res


bst = BST()


bst.insert(50)
bst.insert(30)
bst.insert(20)
bst.insert(40)
bst.insert(70)
bst.insert(60)
bst.insert(80)


print("Searching for 40 in BST:", bst.search(40))  
print("Searching for 90 in BST:", bst.search(90))  


print("In-order traversal of BST:", bst.inorder())

Output: 
Searching for 40 in BST: True
Searching for 90 in BST: False
In-order traversal of BST: [20, 30, 40, 50, 60, 70, 80]

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 5. AVL Tree

class Node:
    def __init__(self, key):
        self.value = key
        self.left = None
        self.right = None
        self.height = 1

class AVLTree:
    def insert(self, root, key):
        if not root:
            return Node(key)
        if key < root.value:
            root.left = self.insert(root.left, key)
        else:
            root.right = self.insert(root.right, key)
        
        root.height = 1 + max(self.height(root.left), self.height(root.right))
        balance = self.balance_factor(root)

        
        if balance > 1 and key < root.left.value:
            return self.right_rotate(root)

        
        if balance < -1 and key > root.right.value:
            return self.left_rotate(root)

        
        if balance > 1 and key > root.left.value:
            root.left = self.left_rotate(root.left)
            return self.right_rotate(root)

       
        if balance < -1 and key < root.right.value:
            root.right = self.right_rotate(root.right)
            return self.left_rotate(root)

        return root

    def left_rotate(self, x):
        y = x.right
        T2 = y.left
        y.left = x
        x.right = T2
        x.height = max(self.height(x.left), self.height(x.right)) + 1
        y.height = max(self.height(y.left), self.height(y.right)) + 1
        return y

    def right_rotate(self, y):
        x = y.left
        T2 = x.right
        x.right = y
        y.left = T2
        y.height = max(self.height(y.left), self.height(y.right)) + 1
        x.height = max(self.height(x.left), self.height(x.right)) + 1
        return x

    def height(self, node):
        if not node:
            return 0
        return node.height

    def balance_factor(self, node):
        if not node:
            return 0
        return self.height(node.left) - self.height(node.right)

    def inorder(self, root):
        if not root:
            return []
        return self.inorder(root.left) + [root.value] + self.inorder(root.right)


avl = AVLTree()
root = None
values = [10, 20, 30, 15, 25]

for value in values:
    root = avl.insert(root, value)

print("In-order traversal of AVL Tree:", avl.inorder(root))

Output: 
In-order traversal of AVL Tree: [10, 15, 20, 25, 30]

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------       


# 6. Binary serach using ptyhon 

def binary_search(arr, target):
    low = 0
    high = len(arr) - 1
    
    while low <= high:
        mid = (low + high) // 2  
        
       
        if arr[mid] == target:
            return mid  
        
        # If target is smaller, ignore the right half
        elif arr[mid] > target:
            high = mid - 1
        
        # If target is larger, ignore the left half
        else:
            low = mid + 1


arr = [10, 20, 30, 40, 50, 60, 70, 80, 90]
target = 50
result = binary_search(arr, target)

if result != -1:
    print(f"Element {target} is present at index {result}.")
else:
    print(f"Element {target} is not present in the array.")

Output: 
Element 50 is present at index 4.

